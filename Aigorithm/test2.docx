LOGO

电子商务的基本结构

测试的挑战

Web应用测试的概念和策略

小结

 互联网应用系统本质上是 C/S模式。
 客户端是浏览器，服务端是Web或应用服务器
 有些公司建立了B2C的模式，如：银行服务，或零售服务
 有些公司建立了B2B的模式，如：供应链管理
 测试基于互联网应用系统的目标与测试传统程序几乎没有什么区别
 互联网应用系统各部件之间紧密耦合，必须在发布到互联网之前暴露其中的
错误
 互联网应用错误必须警惕
 消费者无需为浏览网站而付费，如果面临性能或一般化的设计网站，人们会
选择离开

10.1  电子商务的基本结构

典型的Web系统

10.1  电子商务的基本结构

 第一层，表示层：Web服务器代表三层结构中的第一层，运行Web网站。
互联网应用系统的外观和感觉来自于第一层
 第二层，业务层：运行应用服务器
① 事务处理

② 用户身份鉴定

③ 数据确认

④ 程序日志
 第三层，数据层：核心是数据源，包含与第二层进行通信的数据库设备

10.2  测试的挑战

 Web应用程序失效的地方很多，经常可能遇到的问题有：
① 用户群庞大且五花八门

② 业务环境

③ 地点

④ 安全性

⑤ 测试环境
 配置测试环境是Web应用程序测试的最大挑战
 测试浏览器的兼容性也是一大挑战

10.2  测试的挑战

 第一印象尤其重要，一些测试应集中在易用性和人机界面上
 最重要的测试领域

 P160，图10-1

10.2  测试的挑战

 Web应用开发人员尽量做到4不要：
① 不要妄自揣测谁会使用自己的应用，因为谁都有可能；

② 不要以为每个访问者都和自己一样精通计算机知识，他们也许对计算
机一无所知

③ 不要乐观地以为用户因网站导航体验不佳而还能保持浏览的兴趣

④ 不要天真地认为自己 了解所有用户对于性能和信息的终极需求

 P160，图10-1

Web应用测试概念

• 目的：为了发现存在于Web应用中的内容、功能、易

用性、导航、性能、安全性等方面的错误

• 执行者：Web项目的工程师和其他与项目有关的利益

攸关者参与测试

• 重要性：如果最终用户碰到错误并动摇他们对Web应

用的信息，他们就去其他地方寻找所需要的内容和功
能，这个Web应用就失败了。

质量维度

Web应用环境中的错误

测试策略

测试计划

WebWeb应用测试概念

应用测试概念

质量维度

内容

在句法和语义级别的评估

功能测试

要发现与用户需求不符的错误

结构评估

易用性测试

要确保正确发布了web应用的内容和功能并且是可扩展的，要支持新内容和新
功能的增加

要确保对每一类用户都要有相应的界面支持，用户要能学习和应用所有需要的
导航句法和语义

导航测试

要确保所有的导航句法和语义都被测试，从而发现有关导航的任何错误

性能测试

兼容性测试

确保在各种操作条件、配置、负载变化的情况下，系统在响应用户交互和处理
极限负载时，性能没有出现不可接受的退化
通过在服务器和客户端的不同的配置情况下，执行web应用

互操作性测试

确保web应用能正确的与其他应用或数据库进行交互

安全测试

评估潜在的易受攻击的弱点并尽量发现这些弱点

Web应用环境中的错误

1. Web工程师看到的是一个错误的症状而不是错误本身

2. 发生在某个Web环境中的错误可能很困难或者不可能在该环境之外

重现

3. 很多错误都能被追踪到Web应用配置

4. 因为Web应用存在于客户端/服务器体系结构中，很难跨越客户端、

服务器、网络三个结构层追踪错误

5. 一些错误发生在静态操作环境中，而另一些发生在动态操作环境中

测试策略

测试测试
测试测试
步骤步骤
步骤步骤

1 评审Web应用的内容模型
2 评审Web应用的接口模型
3 评审Web应用的设计模型
4 测试用户界面
5 选择功能模型
6 测试导航路径
7 测试配置的兼容性
8 进行安全测试
9  进行性能测试
10 最终用户测试Web应用

测试计划

1. 测试开始时的任务集
2. 每个测试任务完成后产生的工作结果
3. 测试结果被评估、记录和在回归测试时重用的方式。有

时候测试计划放在项目计划中，有时是单独的文档

Web应用测试的任务集

① 评审利益攸关者的需求，识别用户的关键目的与目标，评审每一类

用户的用例

② 制定优先级确保每个用户的目的与目标都被充分测试

③ 通过描述将要被执行的测试类型定义Web应用测试策略

④ 制定一个测试计划

⑤ 执行“单元”测试

⑥ 执行“集成”测试

⑦ 执行配置测试

⑧ 执行性能测试

测试过程概述

测试过程详述

内容测试

用户界面测试

组件级测试

导航测试

配置测试

安全测试

性能测试

测试过程
测试过程

内容测试

• 内容测试结合评审和生成的可执行的测试用例两种方法

• 内容测试的3个重要目标：

① 发现内容中的语法错误(如：打字错误，排版错误)

② 发现语义错误(信息准确性和完整性的错误)

③ 发现结构错误

内容测试——数据库测试

数据库测试

例：一个金融服务Web应用能提供关于某项基于文本、表格形式和图形
化的复杂的某特定资产(股票、共有基金)信息。当用户请求关于该资产

的信息时，动态产生并提供这些信息内容对象。

①查询大型资产数据库

②从数据库中抽取相关数据

③抽取的数据必须被组织成内容对象

④这些内容对象(表达用户请求特定的信息)被发送到客户环境显示

内容测试——数据库测试

Web应用的数据库测试由于以下因素变得复杂：

1.客户端请求的原始信息很少能够以能被输入到数据库管理系统中的形

式(SQL)表示出来

2.数据库可以被远程服务器上的Web应用调用，所以要测试Web应用和

远端数据库通信中的错误

3.从数据库中获取的原始数据必须传送到服务器应用程序并且转换成恰

当的格式以便将来传送给用户

4.动态内容对象一定要以能够显示给最终用户的形式传递给客户端

内容测试——数据库测试

服务器和客户端之间通过界面层传输
的信息有效

Web应用正确地处理脚本并恰当的抽
取或格式化用户数据

用户数据可以正确地传送到服务器端，
服务器端的数据转换功能能够生成正

确的查询(SQL)

查询被传递到数据管理层，此层与数
据库访问程序(很可能位于另一台机
器)通信

用户界面测试——界面测试策略

• 界面测试的总体策略：

① 找出与特定界面机制相关的错误（如：菜单链接不能正确执行的错误或数

据输入表格方式的错误等）

② 找出在界面实现导航语义、Web应用功能或内容显示方法中存在的错误

用户界面测试——界面测试策略

1. 测试界面特征以确保设计规则、美观以及视觉内容对用户来说是可

用的，不存在错误

2. 类似于单元测试，对单个界面机制进行测试
3. 对于特殊的用户类别，在用例或NSU(导航语义单元)的环境中测试

每一种界面机制

4. 测试完整的界面以找出其中的语义错误
5. 在多种环境中对界面进行测试，确保其兼容性

用户界面测试——测试界面机制

链接

表单

测试每个导航链接确保能到达恰当的内容对象或实现响应的功能

客户端脚本

执行黑盒测试是为了发现脚本执行时发生的错误

动态HTML

弹出窗口

CGI脚本

执行每个包含动态HTML的Web页面以确保动态显示是正确的，且应进行兼容
性测试

执行黑盒测试的重点放在数据的完整性和一旦接受到合法数据时的脚本处理

流内容

应证明流数据是最新的，能正确显示，能够无错的暂停，且容易重新启动

Cookie

服务器端和客户端都需要进行测试

应用相关的界
面机制

测试是否与界面机制定义的功能和特性清单相符

用户界面测试——易用性测试

交互性

交互机制是否易于理解和使用？

布局

布局风格是否使用户快速找到导航机制、内容、功能

可读性

文档是否书写正确，便于理解；图形表述是否易于理解？

美观

布局、颜色、字体和相关特性是否易于使用？用户是否对Web应用感觉舒服？

展示特性

Web应用是否使用了最优的屏幕尺寸和分辨率？

时间敏感性

重要的特性、功能和内容是否可以及时地使用和获得？

个性

Web应用是否调整自身以适应不同类别、不同用户的需要？

可接近性

残疾人是否可以使用该Web应用？

用户界面测试——兼容性测试

• 由兼容性引起的问题举例：

① 下载速度会变得慢得难以接受

② 缺少必要的插件使内容无法获得

③ 浏览器的不同会造成引人注目的页面布局改变

④ 字体风格可能被改变以至于难以辨认或表单可能被不合理的

组织

用户界面测试——兼容性测试

• 兼容性测试步骤：

① 定义一个“经常遇到的”客户端计算机配置及其变化的集

合，本质是创立一个树结构

② Web开发小组导出一系列兼容性确认测试，包括从现有的

界面测试、导航测试、性能测试和安全测试中导出

组件级测试

• 组件级测试也叫功能测试，用来发现Web应用功能方面错

误。组建级别的测试用例经常由表单输入驱动。

• 使用的测试用例设计方法：

① 等价类划分(Equivalence Partitioning)
② 边界值分析(Boundary Value Analysis)
③ 路径测试(Path Testing)
④ 强迫错误测试(Forced Error Testing)

导航测试

• 导航测试的目的：

① 保证任何用户可以使用的路径都处于可工作状态

② 确认每个导航语义单元都可被适当类型的用户使用

导航测试

导航链接

重定向

书签

框架

包括Web应用程序中的内部链接，指向其他应用程序的外部链接和特定网页
中的锚点

当用户请求不存在的URL或选择的链接目标被删除了或名字被改变的情况下
发生的

保证创建书签时可以提取到有意义的网页标题

每个框架都包含特定网页的内容；一个框架集包含多个框架，并可以同时展
现多个网页

网站地图

应当测试入口以保证通过链接使用户得到正确的内容和合适的功能

内部搜索引擎

通过关键字搜索得到需要的内容

配置测试

服务器端问题：

为了验证服务器端的计划配置(如Web服务器、数据库服务器、操作系统、防火墙、并发
应用等)能否正确无误地支持Web应用

客户端问题：

硬件：CPU、内存、存储器、打印设备

操作体统：Linux、Windows、基于移动设备的操作系统等

浏览器软件：Firefox、Internet Explorer、Chrome等

用户界面组件：Active X、Java applets等

插件：QuickTime、RealPlayer等

网络连接设备：有线、DSL、调制解调器等

安全测试

• 设计安全测试用例去探查在某些方面存在的弱点，比如客

户端环境、当数据从客户端到服务器并从服务器再传回客

户端时所发生的网络通信以及服务器端环境

• 客户端的漏洞能追溯到存在于浏览器、邮件程序、通信软

件中的缺陷。

• 经常提到的缺陷：1) 缓冲区溢出 2)未经授权去访问浏览

器中的Cookie

安全测试

为了防止这些漏洞，应实现一个或更多安全要素

防火墙

认证

加密

授权

性能测试

• 性能测试是要发现性能问题。性能问题可以来自服务器端缺

乏资源、不足的网络带宽、数据库的性能不足、操作系统不
完善、糟糕的Web应用功能设计和其他软、硬件问题。

• 测试的目的：

① 理解系统怎样响应负载（用户数、事务数或数据量）

② 收集为了提高性能而更改设计的指标

性能测试

两种性能测试方法

负载测试

压力测试

性能测试

负载测试：

目的：确定Web应用和它的服务器端环境如何响应各种各样的负载条件

N——并发的用户数

T——单位时间每个用户的在线事务数

D——每个事务被服务器处理的数据负载量

吞吐量P值：P=N*T*D

性能测试

例：一个流行的体育新闻网站，在一个给定的时刻，平均每2
分钟20000个并发用户同时提交一个请求(事务T)，每个事务
要求Web应用下载一篇平均大小3KB的新文章

则，吞吐量：

P=（20000*3KB）/(2*60)=500KBytes/s=4Mbits/s 

性能测试

压力测试：压力测试是负载测试的继续，但此时N、T、D变

量要满足和超过操作限制

测试目的：

① 当超出系统容量时系统是逐渐退化还是服务器关闭？

② 服务器对请求进行排队吗？当服务请求取消后服务器会清空请求队

列吗？

③ 如果系统当机了，多长时间才能恢复？

④ 多大的N、T、D值会引起服务器环境失效？

小结

Web应用测试是测试Web应用质量的每个纬度，目的

是发现错误或发现导航质量失败的问题。测试集中在内

容、功能、结构、易用性、导航、性能、兼容性、互操
作、容量、安全等方面。测试应该和Web应用设计的评

审相结合。

